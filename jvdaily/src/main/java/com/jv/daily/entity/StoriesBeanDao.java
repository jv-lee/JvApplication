package com.jv.daily.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORIES_BEAN".
*/
public class StoriesBeanDao extends AbstractDao<StoriesBean, Long> {

    public static final String TABLENAME = "STORIES_BEAN";

    /**
     * Properties of entity StoriesBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Ga_prefix = new Property(2, String.class, "ga_prefix", false, "GA_PREFIX");
        public final static Property Multipic = new Property(3, boolean.class, "multipic", false, "MULTIPIC");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Image = new Property(5, String.class, "image", false, "IMAGE");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
    };


    public StoriesBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StoriesBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORIES_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"GA_PREFIX\" TEXT," + // 2: ga_prefix
                "\"MULTIPIC\" INTEGER NOT NULL ," + // 3: multipic
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"IMAGE\" TEXT," + // 5: image
                "\"DATE\" TEXT);"); // 6: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORIES_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StoriesBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(3, ga_prefix);
        }
        stmt.bindLong(4, entity.getMultipic() ? 1L: 0L);
        stmt.bindLong(5, entity.getType());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StoriesBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String ga_prefix = entity.getGa_prefix();
        if (ga_prefix != null) {
            stmt.bindString(3, ga_prefix);
        }
        stmt.bindLong(4, entity.getMultipic() ? 1L: 0L);
        stmt.bindLong(5, entity.getType());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public StoriesBean readEntity(Cursor cursor, int offset) {
        StoriesBean entity = new StoriesBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ga_prefix
            cursor.getShort(offset + 3) != 0, // multipic
            cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StoriesBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGa_prefix(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMultipic(cursor.getShort(offset + 3) != 0);
        entity.setType(cursor.getInt(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StoriesBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StoriesBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
